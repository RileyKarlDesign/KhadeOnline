document.addEventListener("DOMContentLoaded", function () {

  function runWhenInit() {
    // console.log("The current cart state is: ", window.liquidAjaxCart.cart);
  }

  if (window.liquidAjaxCart?.init) {
    // if Liquid Ajax Cart is already initialized
    runWhenInit();
  } else {
    // wait for Liquid Ajax Cart to be initialized
    document.addEventListener("liquid-ajax-cart:init", runWhenInit);
  }

  let addToCartFormSelector = "#add-to-cart-form",
    productOptionsSelector = addToCartFormSelector + " [name*=option]";

  let productForm = {
    onProductOptionChanged: function (event) {

      let elForm = document.querySelector(addToCartFormSelector);
      let selectedVariant = productForm.getActiveVariant(elForm);

      console.log('form change');
      // console.log( selectedVariant );

      var formChangeEvent = new CustomEvent("form:change", {
        detail: selectedVariant,
      });
      elForm.dispatchEvent(formChangeEvent);
    },

    getActiveVariant: function (elForm, newForm) {
      let formEl = document.querySelector("#add-to-cart-form");
      let variants = JSON.parse(decodeURIComponent(formEl.dataset.variants));

      // formInlineData = elForm.serializeArray(); // removed j query



      (formInlineData = new URLSearchParams(
        Array.from(new FormData(formEl))
      ).toString()),
        (formOptions = {
          option1: null,
          option2: null,
          option3: null,
        }),
        (selectedVariant = null),
        (selectedVariantMax = null);

      // Initialize an empty array to store objects
      let objectsArray = [];

      let keyValuePairs = formInlineData.split("&");
      // Iterate over the key-value pairs and create objects
      keyValuePairs.forEach((pair) => {
        const [key, value] = pair.split("=");
        const obj = {
          name: key, // Add name property
          value: value, // Add value property
        };
        objectsArray.push(obj);
      });



      objectsArray.forEach(function (item, index) {
        if (item.name.indexOf("option") !== -1) {
          formOptions[item.name] = item.value;
        }
      });

      let decodedFormOptions = decodeURIComponent(formOptions);



      variants.forEach(function (variant) {

        console.log(variant.option2)

        console.log(`option1: ${decodeURIComponent(formOptions.option1)}`)
        console.log(`option2: ${decodeURIComponent(formOptions.option2)}`)

        // if variant 2 exsists then match both otherwise match 1



        if (variant.option1 != null && variant.option2 != null) {
          if (
            variant.option1 === decodeURIComponent(formOptions.option1) &&
            variant.option2 === decodeURIComponent(formOptions.option2)
            // variant.option3 === decodeURIComponent(formOptions.option3)
          ) {
            console.log('matched variant')
            selectedVariant = variant;
            selectedVariantMax = variant.inventory_quantity;
            console.log('Selected Variant: ' + { selectedVariant })
            console.log(selectedVariantMax)
            return; // Exiting the loop early since the variant is found
          }

        }
        else if (variant.option1 != null) {

          if (
            variant.option1 === decodeURIComponent(formOptions.option1)

          ) {
            console.log('matched variant')
            selectedVariant = variant;
            selectedVariantMax = variant.inventory_quantity;
            console.log('Selected Variant: ' + { selectedVariant })
            console.log(selectedVariantMax)
            return; // Exiting the loop early since the variant is found
          }

        }






      });


      return selectedVariant;
    },

    validate: function (event) {

      let elForm = this;
      (selectedVariant = productForm.getActiveVariant(elForm)),
        (hasVariant = selectedVariant !== null),
        (canAddToCart = hasVariant && selectedVariant.inventory_quantity > 0),
        ($id = document.querySelector(".js-variant-id")),
        ($quantity = document.querySelector(".js-quantity-total")),
        ($addToCartButton = document.querySelector("#add-to-cart-button"));
      ($maxQuantity = selectedVariant.inventory_quantity);

      if (canAddToCart) {
        $id.value = selectedVariant.id;
        $addToCartButton.disabled = false;
        $quantity.dataset.max = $maxQuantity;
        $addToCartButton.innerHTML = "Add To Cart";
        $addToCartButton.style.opacity = 1;
        $addToCartButton.style.pointerEvents = 'auto';
      } else {
        $id.value = "null";
        $addToCartButton.disabled = true;
        $addToCartButton.innerHTML = "Not In Stock";
        // $addToCartButton.style.display = 'none';
        $addToCartButton.style.opacity = .5;
        $addToCartButton.style.pointerEvents = 'none';

      }
    },

    init: function () {
      document.addEventListener("change", productForm.onProductOptionChanged);
      document.addEventListener("change", function (event) {
        productForm.validate(event);
      });
    },
  };

  productForm.init();

  // QuanityF

  let plus = document.querySelector(".js-quantity-add");
  let minus = document.querySelector(".js-quantity-minus");
  let quantity = document.querySelector(".js-quantity-total");
  let quantityHidden = document.querySelector(".js-hidden-quantity");
  let currentCount = 1;

  let add = () => {
    let max = quantity.dataset.max;
    if (currentCount < max) {
      currentCount += 1;
      quantity.dataset.current = currentCount;
      quantity.innerHTML = currentCount;
      quantity.innerHTML = currentCount;
      quantityHidden.value = currentCount;

    }
  };

  let reduce = () => {
    let max = quantity.dataset.max;

    if (currentCount > 1) {
      currentCount = currentCount - 1;
      quantity.dataset.current = currentCount;
      quantity.innerHTML = currentCount;
      quantity.innerHTML = currentCount;
      quantityHidden.value = currentCount;
    }


  };

  if (plus) {
    plus.addEventListener("click", add);
  }

  if (minus) {
    minus.addEventListener("click", reduce);
  }

  // accoridan

  let a = document.querySelectorAll(".accordian-title");




});


document.addEventListener("liquid-ajax-cart:request-end", (event) => {
  const { requestState } = event.detail;

  // If the "add to cart" request is successful
  if (requestState.requestType === "add" && requestState.responseData?.ok) {
    // Add the CSS class to the "body" tag

  }
});

document.addEventListener("DOMContentLoaded", function () {

});

// btn
